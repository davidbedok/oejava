package hu.qwaevisz.problem011to020;

import hu.qwaevisz.util.DivisorCalculator;
import hu.qwaevisz.util.PrimeCalculator;

import java.util.List;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1
 * 
 * 3: 1,3
 * 
 * 6: 1,2,3,6
 * 
 * 10: 1,2,5,10
 * 
 * 15: 1,3,5,15
 * 
 * 21: 1,3,7,21
 * 
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 * 
 */
public class Problem012divisors {

	private final DivisorCalculator	divisorCalc;
	private final PrimeCalculator	primeCalc;

	public Problem012divisors() {
		this.divisorCalc = new DivisorCalculator();
		this.primeCalc = new PrimeCalculator();
	}

	public long getNextTriangleNumber(long prev, int index) {
		return prev + index;
	}

	public long untilDivisorCounter(long triangleNumber, int index, int divisorCountLimit) {
		long actTriangleNumber = triangleNumber;
		int actIndex = index;
		int divisorCount = 0;
		do {
			actTriangleNumber = this.getNextTriangleNumber(actTriangleNumber, ++actIndex);
			divisorCount = this.divisorCalc.divisorsCount(actTriangleNumber);
		} while (divisorCount < divisorCountLimit);
		return actTriangleNumber;
	}

	public long untilDivisorCounterWithPrimes(long triangleNumber, int index, int divisorCountLimit, int primeLimit) {
		List<Integer> primes = this.primeCalc.eratosthenesAlgorithm(primeLimit);
		long actTriangleNumber = triangleNumber;
		int actIndex = index;
		int divisorCount = 0;
		do {
			actTriangleNumber = this.getNextTriangleNumber(actTriangleNumber, ++actIndex);
			// System.out.println(actTriangleNumber);
			divisorCount = this.divisorCalc.divisorsCountWithPrimes(actTriangleNumber, primes);
		} while (divisorCount < divisorCountLimit);
		return actTriangleNumber;
	}

}
