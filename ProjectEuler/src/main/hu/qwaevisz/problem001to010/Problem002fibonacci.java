package hu.qwaevisz.problem001to010;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 
 * 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 * 
 * @author edvibed
 * 
 */
public class Problem002fibonacci {

	public int fibonacci(int index) {
		if (index < 3) {
			return 1;
		} else {
			return this.fibonacci(index - 1) + this.fibonacci(index - 2);
		}
	}

	/**
	 * This recursive solution is not enough effective
	 * 
	 * @param maxValue
	 * @return
	 */
	public int sumOfAllEvenFibonacci(int maxValue) {
		int sum = 0;
		int index = 1;
		int value = 0;
		while (value < maxValue) {
			System.out.println(value);
			value = this.fibonacci(index);
			if ((value < maxValue) && (value % 2 == 0)) {
				sum += value;
			}
			index++;
		}
		return sum;
	}

	public int fibonacciNonRecursive(int index) {
		int result = 0;
		if (index < 3) {
			return 1;
		} else {
			int nMinus2 = 1;
			int nMinus1 = 1;
			for (int i = 2; i < index; i++) {
				result = nMinus1 + nMinus2;
				nMinus2 = nMinus1;
				nMinus1 = result;
			}
		}
		return result;
	}

	public int sumOfAllEvenFibonacciNonRecursive(int maxValue) {
		int sum = 0;
		int nMinus2 = 1;
		int nMinus1 = 1;
		int result = 0;
		while (sum < maxValue) {
			result = nMinus1 + nMinus2;
			nMinus2 = nMinus1;
			nMinus1 = result;
			if (result % 2 == 0) {
				sum += result;
			}
		}
		return sum;
	}

}
